// Code generated by capnpc-go. DO NOT EDIT.

package fastnetmon

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SimplePacketType struct{ capnp.Struct }

// SimplePacketType_TypeID is the unique identifier for the type SimplePacketType.
const SimplePacketType_TypeID = 0xe4c0cf9a31f5524b

func NewSimplePacketType(s *capnp.Segment) (SimplePacketType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 2})
	return SimplePacketType{st}, err
}

func NewRootSimplePacketType(s *capnp.Segment) (SimplePacketType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 88, PointerCount: 2})
	return SimplePacketType{st}, err
}

func ReadRootSimplePacketType(msg *capnp.Message) (SimplePacketType, error) {
	root, err := msg.RootPtr()
	return SimplePacketType{root.Struct()}, err
}

func (s SimplePacketType) String() string {
	str, _ := text.Marshal(0xe4c0cf9a31f5524b, s.Struct)
	return str
}

func (s SimplePacketType) Source() uint8 {
	return s.Struct.Uint8(0)
}

func (s SimplePacketType) SetSource(v uint8) {
	s.Struct.SetUint8(0, v)
}

func (s SimplePacketType) SampleRatio() uint32 {
	return s.Struct.Uint32(4)
}

func (s SimplePacketType) SetSampleRatio(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s SimplePacketType) SrcIp() uint32 {
	return s.Struct.Uint32(8)
}

func (s SimplePacketType) SetSrcIp(v uint32) {
	s.Struct.SetUint32(8, v)
}

func (s SimplePacketType) DstIp() uint32 {
	return s.Struct.Uint32(12)
}

func (s SimplePacketType) SetDstIp(v uint32) {
	s.Struct.SetUint32(12, v)
}

func (s SimplePacketType) SrcIpv6() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s SimplePacketType) HasSrcIpv6() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SimplePacketType) SetSrcIpv6(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s SimplePacketType) DstIpv6() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SimplePacketType) HasDstIpv6() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SimplePacketType) SetDstIpv6(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s SimplePacketType) SrcAsn() uint32 {
	return s.Struct.Uint32(16)
}

func (s SimplePacketType) SetSrcAsn(v uint32) {
	s.Struct.SetUint32(16, v)
}

func (s SimplePacketType) DstAsn() uint32 {
	return s.Struct.Uint32(20)
}

func (s SimplePacketType) SetDstAsn(v uint32) {
	s.Struct.SetUint32(20, v)
}

func (s SimplePacketType) InputInterface() uint32 {
	return s.Struct.Uint32(24)
}

func (s SimplePacketType) SetInputInterface(v uint32) {
	s.Struct.SetUint32(24, v)
}

func (s SimplePacketType) OutputInterface() uint32 {
	return s.Struct.Uint32(28)
}

func (s SimplePacketType) SetOutputInterface(v uint32) {
	s.Struct.SetUint32(28, v)
}

func (s SimplePacketType) IpProtocolVersion() uint8 {
	return s.Struct.Uint8(1)
}

func (s SimplePacketType) SetIpProtocolVersion(v uint8) {
	s.Struct.SetUint8(1, v)
}

func (s SimplePacketType) Ttl() uint8 {
	return s.Struct.Uint8(2)
}

func (s SimplePacketType) SetTtl(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s SimplePacketType) SourcePort() uint16 {
	return s.Struct.Uint16(32)
}

func (s SimplePacketType) SetSourcePort(v uint16) {
	s.Struct.SetUint16(32, v)
}

func (s SimplePacketType) DestinationPort() uint16 {
	return s.Struct.Uint16(34)
}

func (s SimplePacketType) SetDestinationPort(v uint16) {
	s.Struct.SetUint16(34, v)
}

func (s SimplePacketType) Protocol() uint32 {
	return s.Struct.Uint32(36)
}

func (s SimplePacketType) SetProtocol(v uint32) {
	s.Struct.SetUint32(36, v)
}

func (s SimplePacketType) Length() uint64 {
	return s.Struct.Uint64(40)
}

func (s SimplePacketType) SetLength(v uint64) {
	s.Struct.SetUint64(40, v)
}

func (s SimplePacketType) NumberOfPackets() uint64 {
	return s.Struct.Uint64(48)
}

func (s SimplePacketType) SetNumberOfPackets(v uint64) {
	s.Struct.SetUint64(48, v)
}

func (s SimplePacketType) Flags() uint8 {
	return s.Struct.Uint8(3)
}

func (s SimplePacketType) SetFlags(v uint8) {
	s.Struct.SetUint8(3, v)
}

func (s SimplePacketType) IpFragmented() bool {
	return s.Struct.Bit(448)
}

func (s SimplePacketType) SetIpFragmented(v bool) {
	s.Struct.SetBit(448, v)
}

func (s SimplePacketType) IpDontFragment() bool {
	return s.Struct.Bit(449)
}

func (s SimplePacketType) SetIpDontFragment(v bool) {
	s.Struct.SetBit(449, v)
}

func (s SimplePacketType) TsSec() int64 {
	return int64(s.Struct.Uint64(64))
}

func (s SimplePacketType) SetTsSec(v int64) {
	s.Struct.SetUint64(64, uint64(v))
}

func (s SimplePacketType) TsMsec() int64 {
	return int64(s.Struct.Uint64(72))
}

func (s SimplePacketType) SetTsMsec(v int64) {
	s.Struct.SetUint64(72, uint64(v))
}

func (s SimplePacketType) PacketPayloadLength() int32 {
	return int32(s.Struct.Uint32(60))
}

func (s SimplePacketType) SetPacketPayloadLength(v int32) {
	s.Struct.SetUint32(60, uint32(v))
}

func (s SimplePacketType) PacketPayloadFullLength() uint32 {
	return s.Struct.Uint32(80)
}

func (s SimplePacketType) SetPacketPayloadFullLength(v uint32) {
	s.Struct.SetUint32(80, v)
}

func (s SimplePacketType) PacketDirection() uint8 {
	return s.Struct.Uint8(57)
}

func (s SimplePacketType) SetPacketDirection(v uint8) {
	s.Struct.SetUint8(57, v)
}

func (s SimplePacketType) AgentIpAddress() uint32 {
	return s.Struct.Uint32(84)
}

func (s SimplePacketType) SetAgentIpAddress(v uint32) {
	s.Struct.SetUint32(84, v)
}

// SimplePacketType_List is a list of SimplePacketType.
type SimplePacketType_List struct{ capnp.List }

// NewSimplePacketType creates a new list of SimplePacketType.
func NewSimplePacketType_List(s *capnp.Segment, sz int32) (SimplePacketType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 88, PointerCount: 2}, sz)
	return SimplePacketType_List{l}, err
}

func (s SimplePacketType_List) At(i int) SimplePacketType { return SimplePacketType{s.List.Struct(i)} }

func (s SimplePacketType_List) Set(i int, v SimplePacketType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SimplePacketType_List) String() string {
	str, _ := text.MarshalList(0xe4c0cf9a31f5524b, s.List)
	return str
}

// SimplePacketType_Promise is a wrapper for a SimplePacketType promised by a client call.
type SimplePacketType_Promise struct{ *capnp.Pipeline }

func (p SimplePacketType_Promise) Struct() (SimplePacketType, error) {
	s, err := p.Pipeline.Struct()
	return SimplePacketType{s}, err
}

const schema_a8a892437a5fd28f = "x\xdaL\xd3\xc1\x8b\x1cE\x14\x06\xf0\xef\xab\x9a\x9e\xd9" +
	"\xc9\xeedvR5\xc9\x06\x94\x8dB J\x10W\xa2" +
	"hPf\xa3\xeb\xe2\xea\x06g\xb7EP\x02Kg\xa6" +
	"w\xb7\xb5\xb7\xbb\xe9\xae\x11\x93K\xc0\x7f@\xc8\xd1\xa3" +
	"\xa7\\<{\x8d\xe2EP\x0c\xa2\x10!B\x84\x15\x14" +
	"\"x0\xe0EF^-3\x93\xdb\xbc\xdfW\xfd\xea" +
	"UQ\xf3\xec\x17\\U\x9d`\x07\xd8\xaa\x05\xf5\xf1[" +
	"\xdb\x0fW>\xfb\xe1\xf6!\xb6,\xe7\xc7\x9f\xfe\xb8s" +
	"\xfd\xb5\x9b\xb7n!P\x0d`\xa5\xfb4;g\xe5\xc7" +
	"\x13_\x06\xe0\xb8J\x0e\x8a4\xde)t4\xf80v" +
	"\xcf\x0c\xa2\"+.\x86\x1e\xfb\x9e\xda\xef\\+\xe2>" +
	"\xb9\xb5\xafk@\x8d\x80\xf9V]\x04\xc2o\x94fx" +
	"G)vHK\xf1\xef\xd5U \xfcN\xfc\xae\xb8R" +
	"\x96\x0a0?\xab\xe7\x80\xf0\x8e\xf8=q\xad-5`" +
	"~\xf1\xfe\x93\xf8}\xa5\xc8\x9ae\x0d0\xbf\xaaW\x81" +
	"\xf0\xae\xf0\xa1,\x0fh\x19\x00\xe67\xef\xf7\xc4\xff\x10" +
	"\xaf\xd7,\xeb\x80\xf9\xdd\x8fs_\xfc\x81x#\xb0l" +
	"\x00\xe6O\xef\x87\xe2\x7f\x8b\xcf\xd5-\xe7\x00\xf3\x97\xba" +
	"\x0e\x84\x0f\xc4\xff\x15o6,\x9b\x80y\xa8>\x01\xc2" +
	"\x7f\x94\xe6\xb6V\xec\x1c\xa3\xe51\xc0\xfc\xa7n\x02\xdb" +
	"Z3\\\x10\x9eW\x96\xf3\x80i\xea'\x81\xb0&\xbe" +
	"(\xbe\xb0h\xb9\x00\x98\x96~\x1f\x08\x17\xc4\x97\xc4[" +
	"\x1d\xcb\x16`\xbaZ\xba[\xf13\xe2\xc7\x9b\x96\xc7\x01" +
	"\xf3\xb8~\x13\x08\x1f\x13?'\xde\x0e,\xdb\x809\xab" +
	"e\xfa3\xe2\xe7\xc5\x17\xeb\x96\x8b\x80y\xca\xf79'" +
	"~A\xbc\xa3-;\x80Y\xd1r\x99\xe7\xc5_\xd4\x8a" +
	"+'n\xd3\xf2\x04`\x9e\xd7\x1f\x00\xe1\x05\x09V%" +
	"0_\xd1\xd2\x00\xe6\x15-\xf7\xf0\xb2\x04oH';" +
	"gi\x01\xf3\xba\xef\xb4*\xbe)\xdemZv\x01\xb3" +
	"\xe1'Z\x13\xef\x8b\x9fl[\x9e\x04\xcce\xfd9\x10" +
	"\xf6\xc5\xaf\x88\x9f\xb2\x96\xa7\x00\xf3\x9e\xfe\x1a\x08\xaf\x88" +
	"\xef\x8b/\xbdd\xb9\x04\x98\xd8\x9f`(^\x88\x9f\xee" +
	"Z\x9e\x06\xcc\x81\x9f'\x15\xffX+\xf6\xaa|T\x0e" +
	"b\xd6\xa1X\x97\x97\x1a\xc9\xa3\xdc\x8e\xd0pI\xce9" +
	"(\xce\x81\xcbU9\xd8(\xa6\xd5\xb0r\xb3\xea\x86\xcf" +
	">z\x81-(\xb6\xc0\x1b>\x9d\xd5\xbd\xaa\x1c\\\xaa" +
	"\xb2\xc9\xf2\xde\xb0r\x8f\x94\xe3$+Fn#s\xe8" +
	"\xc5\xe5n4\x88\xa7A>r>\xa1;\x0a0\xfb\xa4" +
	"\xe8\x97\xb9\xcb\x07\xcc\xd3w\xe3\xb2Jrf\x93\xf1\x1b" +
	"\xce\xa5\xb3\xa3\xf8\x93\xf5s\xe8\xd2\xb1\x01\xc5\x068\x1e" +
	"\xc6\x95K\xb2\xc81\xc9\xb3~^:L\x93\xc27\xcd" +
	"S`\xbaU/\x8d\xb3=\xb7\xcf&\x14\x9b\xe08\x1b" +
	"\x1d\\\x8d\xcb\xb7wy\xf4\xa7\xad0I\x96w\xd3h" +
	"\xaf\x9a\xee\x9c\x14\xebe\xb4w\x10\xa3\x9d\xb9xHB" +
	"\x91\x9e\xd7\xf2\xcc\xad\x97\xe8I\x98\xb9I\xb0\xec\xaa0" +
	"\x1e0\x80b\x00\xf6\\u\xb9\x9a\x95\xe3\xc2\xef\xd5\x8f" +
	"x-\xcd\xa3\xe1f\x9c5d\xa4\x1a\x14k\x8f\xa4\xca" +
	"\xa7\xeb\xa34\xdd\xf43\xcf\xae\xebh\xc5Z\xc22\x1e" +
	"\xb8$\xcf0\x1d3\xda\x8b3\xb7Q\\Bo8," +
	"\xe3\xaa\x9a|\xf2\x7f\x00\x00\x00\xff\xff\x97\x80\xeb\xfa"

func init() {
	schemas.Register(schema_a8a892437a5fd28f,
		0xe4c0cf9a31f5524b)
}
